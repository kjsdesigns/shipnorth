networks:
  shipnorth:
    driver: bridge

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shipnorth-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: unless-stopped
    networks:
      - shipnorth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Main Application (Express API + Next.js Web)
  shipnorth:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: shipnorth-app
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
      - "${API_PORT}:${API_PORT}"
    volumes:
      # Bind mount the entire project for development
      - .:/app
      # Persist node_modules to avoid reinstalling on every container start
      - node_modules:/app/node_modules
      - api_node_modules:/app/apps/api/node_modules
      - web_node_modules:/app/apps/web/node_modules
    env_file:
      - .env
    environment:
      - NODE_ENV=development  
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@shipnorth-postgres:5432/${POSTGRES_DB}
      # For container-to-container testing, API needs to be accessible via container name
      - NEXT_PUBLIC_API_URL_CONTAINER=http://shipnorth-app:${API_PORT}
    command: ./scripts/docker-startup.sh
    restart: unless-stopped
    # Resource limits for concurrent testing optimization
    deploy:
      resources:
        limits:
          cpus: '3.0'    # Use 3 out of 4 available cores
          memory: 4G     # Generous memory allocation
        reservations:
          cpus: '1.0'    # Reserve 1 core minimum
          memory: 1G     # Reserve 1GB minimum
    depends_on:
      postgres:
        condition: service_healthy
    # Ensure the container has access to file system events for hot reload
    stdin_open: true
    tty: true
    networks:
      - shipnorth
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8850/health && curl -f http://localhost:8849"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Test Runner Service (on-demand)
  test-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.tests
    container_name: shipnorth-test-runner
    volumes:
      # Mount test files and source for live updates
      - ./tests:/app/tests
      - ./playwright-optimized.config.ts:/app/playwright-optimized.config.ts
      - ./playwright.config.ts:/app/playwright.config.ts
      - ./.env:/app/.env
      # Mount output directories to host for report access
      - ./test-results:/app/test-results
      - ./test-reports:/app/test-reports
      - ./test-artifacts:/app/test-artifacts
      - ./test-artifacts-optimized:/app/test-artifacts-optimized
      - ./live-scoreboard.html:/app/live-scoreboard.html
      # Use dedicated volume for test runner node_modules
      - test_runner_node_modules:/app/node_modules
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - TEST_ENV=local
      - DOCKER_ENV=true
      # Use localhost since test runner uses host networking
      - WEB_PORT=${WEB_PORT}
      - API_PORT=${API_PORT}
    # Resource limits for test runner optimization
    deploy:
      resources:
        limits:
          cpus: '2.0'    # Dedicated cores for test execution
          memory: 3G     # Generous memory for browser processes
        reservations:
          cpus: '0.5'    # Reserve minimum for test runner
          memory: 512M   # Reserve minimum memory
    # Use host network mode so test container can access localhost ports
    network_mode: host
    depends_on:
      - shipnorth
      - postgres
    profiles:
      - testing  # Only start when explicitly requested
    working_dir: /app

volumes:
  node_modules:
  api_node_modules:
  web_node_modules:
  postgres_data:
  test_runner_node_modules: