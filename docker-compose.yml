networks:
  shipnorth:
    driver: bridge

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: shipnorth-postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: unless-stopped
    networks:
      - shipnorth
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Main Application (Express API + Next.js Web)
  shipnorth:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: shipnorth-app
    ports:
      - "${WEB_PORT}:${WEB_PORT}"
      - "${API_PORT}:${API_PORT}"
    volumes:
      # Bind mount the entire project for development
      - .:/app
      # Persist node_modules to avoid reinstalling on every container start
      - node_modules:/app/node_modules
      - api_node_modules:/app/apps/api/node_modules
      - web_node_modules:/app/apps/web/node_modules
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@shipnorth-postgres:5432/${POSTGRES_DB}
    command: ./scripts/docker-startup.sh
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    # Ensure the container has access to file system events for hot reload
    stdin_open: true
    tty: true
    networks:
      - shipnorth
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:$$API_PORT/health && curl -f http://localhost:$$WEB_PORT"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  node_modules:
  api_node_modules:
  web_node_modules:
  postgres_data: